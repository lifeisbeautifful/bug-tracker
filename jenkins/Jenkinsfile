pipeline {
    agent any

    stages {
        stage('Run backend tests') {
            agent {
                docker {
                    image 'snakee/golang-junit:1.21'
                    reuseNode true
                }
            }
            steps {
                dir('bugtracker-backend') {
                    sh '''
                        # Set Go cache to a writable location
                        export GOCACHE="$PWD/.cache/go-build"
                        export GOMODCACHE="$PWD/.cache/go-mod"
                        
                        # Create cache directories
                        mkdir -p "$GOCACHE" "$GOMODCACHE"
                        
                        # Run the tests
                        go test -v ./... 2>&1 | go-junit-report > report.xml

                        # Generate coverage report
                        go test -coverprofile=coverage.out -covermode=atomic ./...
                        go tool cover -html=coverage.out -o coverage.html

                        mkdir -p backend_coverage
                        mv coverage.html backend_coverage/
                    '''
                }
            }
            post{
                always {
                    junit 'bugtracker-backend/report.xml'
                    publishHTML target: [
                        reportDir: 'bugtracker-backend/backend_coverage',
                        reportFiles: 'coverage.html',
                        reportName: 'backend coverage report'
                    ]
                }
            }
        }

        stage('Run application') {
            agent {
                docker {
                    image 'docker:27.5.1'
                    reuseNode true
                    args '-v/var/run/docker.sock:/var/run/docker.sock -u 0'
                }
            }
            steps {
                sh 'docker compose up --build -d'
            }
        }

        stage('Run API tests') {
            agent {
                docker {
                    image 'mcr.microsoft.com/playwright:v1.50.0-jammy'
                    reuseNode true
                    args '-u 0 --network=host'
                }
            }
            steps {
                dir('tests-api') {
                    sh 'npx wait-port http://localhost:8080/api/health -t 30000'

                    sh 'npm ci'
                    sh 'npx playwright test'
                }
            }
            post {
                always {
                    junit 'tests-api/test-results/results.xml'
                    publishHTML target: [
                        reportDir: 'tests-api/playwright-report',
                        reportFiles: 'index.html',
                        reportName: 'API tests report'
                    ]
                }
            }
        }

        stage('Run E2E') {
            agent {
                docker {
                    image 'mcr.microsoft.com/playwright:v1.50.0-jammy'
                    reuseNode true
                    args '-u 0 --network=host'
                }
            }
            steps {
                dir('tests-e2e') {
                    sh 'npm ci'
                    sh 'npx playwright test'
                }
            }
            post {
                always {
                    junit 'tests-e2e/test-results/results.xml'
                    publishHTML target: [
                        reportDir: 'tests-e2e/playwright-report',
                        reportFiles: 'index.html',
                        reportName: 'E2E tests report'
                    ]
                }
            }
        }

        stage('Run performance tests') {
            agent {
                docker {
                    image 'grafana/k6:latest'
                    reuseNode true
                    args '--network=host -u root --entrypoint=""'
                }
            }
            steps {
                dir('tests-perf') {
                    sh 'k6 run script.js'
                }
            }
            post {
                always {
                    publishHTML target: [
                        reportDir: 'test-perf',
                        reportFiles: 'perf-results.html',
                        reportName: 'Performance tests report'
                    ]
                }
            }
        }

        // stage('Run frontend tests') {
        //     parallel {
        //         agent {
        //             docker {
        //                 image 'node:20-alpine'
        //                 reuseNode true
        //             }
        //         }
        //         steps {
        //             dir('bugtracker-frontend') {
        //                 sh '''
        //                 npm ci
        //                 npm test
        //                 mkdir -p frontend_coverage
        //                 mv coverage frontend_coverage/
        //                 '''
        //             }
        //         }
        //     }

        //     post {
        //         always {
        //             junit 'bugtracker-frontend/test-results.xml'
        //             publishHTML target: [
        //                 reportDir: 'bugtracker-frontend/frontend_coverage/coverage',
        //                 reportFiles: 'index.html',
        //                 reportName: 'frontend coverage report'
        //             ]
        //         }
        //     }

        // }
    }
    post {
        always {
            cleanWs()
        }
    }
}