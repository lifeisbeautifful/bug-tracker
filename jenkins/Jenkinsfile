pipeline {
    agent any

    stages {
        stage('Run backend tests') {
            agent {
                docker {
                    image 'snakee/golang-junit:1.21'
                    reuseNode true
                }
            }
            steps {
                dir('bugtracker-backend') {
                    sh '''
                        # Set Go cache to a writable location
                        export GOCACHE="$PWD/.cache/go-build"
                        export GOMODCACHE="$PWD/.cache/go-mod"
                        
                        # Create cache directories
                        mkdir -p "$GOCACHE" "$GOMODCACHE"
                        
                        # Run the tests
                        go test -v ./... 2>&1 | go-junit-report > report.xml

                        # Generate coverage report
                        go test -coverprofile=coverage.out -covermode=atomic ./...
                        go tool cover -html=coverage.out -o coverage.html

                        mkdir -p backend_coverage
                        mv coverage.html backend_coverage/
                    '''
                }
            }
            post{
                always {
                    junit 'bugtracker-backend/report.xml'
                    publishHTML target: [
                        reportDir: 'bugtracker-backend/backend_coverage',
                        reportFiles: 'coverage.html',
                        reportName: 'backend coverage report'
                    ]
                }
            }
        }

        stage('Run frontend tests') {
            parallel {
                agent {
                    docker {
                        image 'node:20-alpine'
                        reuseNode true
                    }
                }
                steps {
                    dir('bugtracker-frontend') {
                        sh '''
                        npm ci
                        npm test
                        mkdir -p frontend_coverage
                        mv coverage frontend_coverage/
                        '''
                    }
                }
            }
            
            post {
                always {
                    junit 'bugtracker-frontend/test-results.xml'
                    publishHTML target: [
                        reportDir: 'bugtracker-frontend/frontend_coverage/coverage',
                        reportFiles: 'index.html',
                        reportName: 'frontend coverage report'
                    ]
                }
            }

        }
    }
}